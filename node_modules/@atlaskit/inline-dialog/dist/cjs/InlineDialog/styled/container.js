"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Container = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _colors = require("@atlaskit/theme/colors");

var _components = require("@atlaskit/theme/components");

var _constants = require("@atlaskit/theme/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var themedBackground = (0, _components.themed)({
  light: "var(--ds-surface-overlay, ".concat(_colors.N0, ")"),
  dark: "var(--ds-surface-overlay, ".concat(_colors.DN50, ")")
});
var themedColor = (0, _components.themed)({
  light: "var(--ds-text, ".concat(_colors.N900, ")"),
  dark: "var(--ds-text, ".concat(_colors.DN600, ")")
});
var themedBoxShadow = (0, _components.themed)({
  light: "var(--ds-shadow-overlay, ".concat("0 4px 8px -2px ".concat(_colors.N50A, ", 0 0 1px ").concat(_colors.N60A), ")"),
  dark: "var(--ds-shadow-overlay, ".concat("0 4px 8px -2px ".concat(_colors.DN50A, ", 0 0 1px ").concat(_colors.DN60A), ")")
});
var borderRadius = (0, _constants.borderRadius)();
var gridSize = (0, _constants.gridSize)();
var CSS_THEME_BACKGROUND = '--theme-background';
var CSS_THEME_COLOR = '--theme-color';
var CSS_THEME_BOX_SHADOW = '--theme-box-shadow';
var containerStyles = (0, _core.css)({
  boxSizing: 'content-box',
  maxWidth: "".concat(gridSize * 56, "px"),
  maxHeight: "".concat(gridSize * 56, "px"),
  padding: "".concat(gridSize * 2, "px ").concat(gridSize * 3, "px;"),
  zIndex: _constants.layers.dialog(),
  background: "var(".concat(CSS_THEME_BACKGROUND, ")"),
  borderRadius: "".concat(borderRadius, "px"),
  boxShadow: "var(".concat(CSS_THEME_BOX_SHADOW, ")"),
  color: "var(".concat(CSS_THEME_COLOR, ")"),
  '&:focus': {
    outline: 'none'
  }
});

/**
 * __Container__
 *
 * A container is used as a styled wrapper around the contents of an inline dialog.
 * Note that the styles here are merged with the style prop that comes from the popper.js library.
 *
 */
var Container = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _objectSpread2;

  var children = _ref.children,
      onBlur = _ref.onBlur,
      onClick = _ref.onClick,
      onFocus = _ref.onFocus,
      style = _ref.style,
      testId = _ref.testId;
  var theme = (0, _components.useGlobalTheme)();
  return (0, _core.jsx)("div", {
    css: containerStyles,
    "data-testid": testId,
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    ref: ref,
    style: _objectSpread((_objectSpread2 = {}, (0, _defineProperty2.default)(_objectSpread2, CSS_THEME_BACKGROUND, themedBackground(theme)), (0, _defineProperty2.default)(_objectSpread2, CSS_THEME_COLOR, themedColor(theme)), (0, _defineProperty2.default)(_objectSpread2, CSS_THEME_BOX_SHADOW, themedBoxShadow(theme)), _objectSpread2), style)
  }, children);
});
exports.Container = Container;