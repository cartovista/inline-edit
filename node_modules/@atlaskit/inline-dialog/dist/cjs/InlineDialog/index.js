"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InlineDialogWithoutAnalytics = void 0;

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _bindEventListener = require("bind-event-listener");

var _reactNodeResolver = _interopRequireDefault(require("react-node-resolver"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));

var _popper = require("@atlaskit/popper");

var _container = require("./styled/container");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** @jsx jsx */
var packageName = "@atlaskit/inline-dialog";
var packageVersion = "13.3.2";

var checkIsChildOfPortal = function checkIsChildOfPortal(node) {
  if (!node) {
    return false;
  }

  return node.classList && node.classList.contains('atlaskit-portal-container') || checkIsChildOfPortal(node.parentElement);
};

var InlineDialog = /*#__PURE__*/(0, _react.memo)(function InlineDialog(_ref) {
  var _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      _ref$onContentBlur = _ref.onContentBlur,
      onContentBlur = _ref$onContentBlur === void 0 ? _noop.default : _ref$onContentBlur,
      _ref$onContentClick = _ref.onContentClick,
      onContentClick = _ref$onContentClick === void 0 ? _noop.default : _ref$onContentClick,
      _ref$onContentFocus = _ref.onContentFocus,
      onContentFocus = _ref$onContentFocus === void 0 ? _noop.default : _ref$onContentFocus,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? _noop.default : _ref$onClose,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom-start' : _ref$placement,
      _ref$strategy = _ref.strategy,
      strategy = _ref$strategy === void 0 ? 'fixed' : _ref$strategy,
      testId = _ref.testId,
      content = _ref.content,
      children = _ref.children;
  var containerRef = (0, _react.useRef)(null);
  var triggerRef = (0, _react.useRef)(null); // we put this into a ref to avoid handleClickOutside having this as a dependency

  var onCloseRef = (0, _react.useRef)(onClose);
  (0, _react.useEffect)(function () {
    onCloseRef.current = onClose;
  });
  var handleClickOutside = (0, _react.useCallback)(function (event) {
    var target = event.target; // checks for when target is not HTMLElement

    if (!(target instanceof HTMLElement)) {
      return;
    } // TODO: This is to handle the case where the target is no longer in the DOM.
    // This happens with react-select in datetime picker. There might be other
    // edge cases for this.


    if (!document.body.contains(target)) {
      return;
    } // exit if we click outside but on the trigger â€” it can handle the clicks itself


    if (triggerRef.current && triggerRef.current.contains(target)) {
      return;
    } // handles the case where inline dialog opens portalled elements such as modal


    if (checkIsChildOfPortal(target)) {
      return;
    } // call onClose if the click originated from outside the dialog


    if (containerRef.current && !containerRef.current.contains(target)) {
      var _onCloseRef$current;

      (_onCloseRef$current = onCloseRef.current) === null || _onCloseRef$current === void 0 ? void 0 : _onCloseRef$current.call(onCloseRef, {
        isOpen: false,
        event: event
      });
    }
  }, []);
  (0, _react.useEffect)(function () {
    if (!isOpen) {
      return;
    }

    var unbind;
    unbind = (0, _bindEventListener.bind)(window, {
      type: 'click',
      listener: function listener(e) {
        return handleClickOutside(e);
      },
      options: {
        capture: true
      }
    });
    return unbind;
  }, [isOpen, handleClickOutside]);
  var popper = isOpen ? (0, _core.jsx)(_popper.Popper, {
    placement: placement,
    strategy: strategy
  }, function (_ref2) {
    var _ref3 = _ref2.ref,
        style = _ref2.style;
    return (0, _core.jsx)(_container.Container, {
      onBlur: onContentBlur,
      onFocus: onContentFocus,
      onClick: onContentClick,
      ref: function ref(node) {
        if (node) {
          containerRef.current = node;

          if (typeof _ref3 === 'function') {
            _ref3(node);
          } else {
            _ref3.current = node;
          }
        }
      },
      style: style,
      testId: testId
    }, content);
  }) : null;
  return (0, _core.jsx)(_popper.Manager, null, (0, _core.jsx)(_popper.Reference, null, function (_ref4) {
    var ref = _ref4.ref;
    return (0, _core.jsx)(_reactNodeResolver.default, {
      innerRef: function innerRef(node) {
        triggerRef.current = node;

        if (typeof ref === 'function') {
          ref(node);
        } else {
          ref.current = node;
        }
      }
    }, children);
  }), popper);
});
exports.InlineDialogWithoutAnalytics = InlineDialog;
InlineDialog.displayName = 'InlineDialog';
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'inlineDialog',
  packageName: packageName,
  packageVersion: packageVersion
})((0, _analyticsNext.withAnalyticsEvents)({
  onClose: createAndFireEventOnAtlaskit({
    action: 'closed',
    actionSubject: 'inlineDialog',
    attributes: {
      componentName: 'inlineDialog',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(InlineDialog));

exports.default = _default;