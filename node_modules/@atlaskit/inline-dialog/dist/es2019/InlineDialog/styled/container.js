/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/click-events-have-key-events */

/** @jsx jsx */
import React, { forwardRef } from 'react';
import { css, jsx } from '@emotion/core';
import { DN50, DN50A, DN600, DN60A, N0, N50A, N60A, N900 } from '@atlaskit/theme/colors';
import { themed, useGlobalTheme } from '@atlaskit/theme/components';
import { borderRadius as getBorderRadius, gridSize as getGridSize, layers } from '@atlaskit/theme/constants';
const themedBackground = themed({
  light: `var(--ds-surface-overlay, ${N0})`,
  dark: `var(--ds-surface-overlay, ${DN50})`
});
const themedColor = themed({
  light: `var(--ds-text, ${N900})`,
  dark: `var(--ds-text, ${DN600})`
});
const themedBoxShadow = themed({
  light: `var(--ds-shadow-overlay, ${`0 4px 8px -2px ${N50A}, 0 0 1px ${N60A}`})`,
  dark: `var(--ds-shadow-overlay, ${`0 4px 8px -2px ${DN50A}, 0 0 1px ${DN60A}`})`
});
const borderRadius = getBorderRadius();
const gridSize = getGridSize();
const CSS_THEME_BACKGROUND = '--theme-background';
const CSS_THEME_COLOR = '--theme-color';
const CSS_THEME_BOX_SHADOW = '--theme-box-shadow';
const containerStyles = css({
  boxSizing: 'content-box',
  maxWidth: `${gridSize * 56}px`,
  maxHeight: `${gridSize * 56}px`,
  padding: `${gridSize * 2}px ${gridSize * 3}px;`,
  zIndex: layers.dialog(),
  background: `var(${CSS_THEME_BACKGROUND})`,
  borderRadius: `${borderRadius}px`,
  boxShadow: `var(${CSS_THEME_BOX_SHADOW})`,
  color: `var(${CSS_THEME_COLOR})`,
  '&:focus': {
    outline: 'none'
  }
});

/**
 * __Container__
 *
 * A container is used as a styled wrapper around the contents of an inline dialog.
 * Note that the styles here are merged with the style prop that comes from the popper.js library.
 *
 */
export const Container = /*#__PURE__*/forwardRef(({
  children,
  onBlur,
  onClick,
  onFocus,
  style,
  testId
}, ref) => {
  const theme = useGlobalTheme();
  return jsx("div", {
    css: containerStyles,
    "data-testid": testId,
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    ref: ref,
    style: {
      [CSS_THEME_BACKGROUND]: themedBackground(theme),
      [CSS_THEME_COLOR]: themedColor(theme),
      [CSS_THEME_BOX_SHADOW]: themedBoxShadow(theme),
      ...style
    }
  }, children);
});