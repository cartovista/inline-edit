import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/click-events-have-key-events */

/** @jsx jsx */
import React, { forwardRef } from 'react';
import { css, jsx } from '@emotion/core';
import { DN50, DN50A, DN600, DN60A, N0, N50A, N60A, N900 } from '@atlaskit/theme/colors';
import { themed, useGlobalTheme } from '@atlaskit/theme/components';
import { borderRadius as getBorderRadius, gridSize as getGridSize, layers } from '@atlaskit/theme/constants';
var themedBackground = themed({
  light: "var(--ds-surface-overlay, ".concat(N0, ")"),
  dark: "var(--ds-surface-overlay, ".concat(DN50, ")")
});
var themedColor = themed({
  light: "var(--ds-text, ".concat(N900, ")"),
  dark: "var(--ds-text, ".concat(DN600, ")")
});
var themedBoxShadow = themed({
  light: "var(--ds-shadow-overlay, ".concat("0 4px 8px -2px ".concat(N50A, ", 0 0 1px ").concat(N60A), ")"),
  dark: "var(--ds-shadow-overlay, ".concat("0 4px 8px -2px ".concat(DN50A, ", 0 0 1px ").concat(DN60A), ")")
});
var borderRadius = getBorderRadius();
var gridSize = getGridSize();
var CSS_THEME_BACKGROUND = '--theme-background';
var CSS_THEME_COLOR = '--theme-color';
var CSS_THEME_BOX_SHADOW = '--theme-box-shadow';
var containerStyles = css({
  boxSizing: 'content-box',
  maxWidth: "".concat(gridSize * 56, "px"),
  maxHeight: "".concat(gridSize * 56, "px"),
  padding: "".concat(gridSize * 2, "px ").concat(gridSize * 3, "px;"),
  zIndex: layers.dialog(),
  background: "var(".concat(CSS_THEME_BACKGROUND, ")"),
  borderRadius: "".concat(borderRadius, "px"),
  boxShadow: "var(".concat(CSS_THEME_BOX_SHADOW, ")"),
  color: "var(".concat(CSS_THEME_COLOR, ")"),
  '&:focus': {
    outline: 'none'
  }
});

/**
 * __Container__
 *
 * A container is used as a styled wrapper around the contents of an inline dialog.
 * Note that the styles here are merged with the style prop that comes from the popper.js library.
 *
 */
export var Container = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _objectSpread2;

  var children = _ref.children,
      onBlur = _ref.onBlur,
      onClick = _ref.onClick,
      onFocus = _ref.onFocus,
      style = _ref.style,
      testId = _ref.testId;
  var theme = useGlobalTheme();
  return jsx("div", {
    css: containerStyles,
    "data-testid": testId,
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    ref: ref,
    style: _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, CSS_THEME_BACKGROUND, themedBackground(theme)), _defineProperty(_objectSpread2, CSS_THEME_COLOR, themedColor(theme)), _defineProperty(_objectSpread2, CSS_THEME_BOX_SHADOW, themedBoxShadow(theme)), _objectSpread2), style)
  }, children);
});