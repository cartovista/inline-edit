import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children"],
    _excluded2 = ["isInvalid", "isRequired"],
    _excluded3 = ["fieldProps"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import Field from './field';

/**
 * __Range field__
 *
 * A range field is where a user can submit a range input as a part of a form.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#rangefield-reference)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#rangefield-reference)
 * - [Usage](https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#rangefield-reference)
 */
var RangeField = function RangeField(props) {
  var children = props.children,
      strippedProps = _objectWithoutProperties(props, _excluded); // isInvalid and isRequired are specifically invalid for range inputs


  return (
    /*#__PURE__*/
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    React.createElement(Field, _extends({}, strippedProps, {
      transform: Number
    }), function (_ref) {
      var _ref$fieldProps = _ref.fieldProps,
          isInvalid = _ref$fieldProps.isInvalid,
          isRequired = _ref$fieldProps.isRequired,
          fieldProps = _objectWithoutProperties(_ref$fieldProps, _excluded2),
          rest = _objectWithoutProperties(_ref, _excluded3);

      return children(_objectSpread({
        fieldProps: fieldProps
      }, rest));
    })
  );
};

export default RangeField;