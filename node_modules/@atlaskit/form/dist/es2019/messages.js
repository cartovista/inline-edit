/** @jsx jsx */
import React from 'react';
import { css, jsx } from '@emotion/core';
import SuccessIcon from '@atlaskit/icon/glyph/editor/success';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import { G400, N200, R400 } from '@atlaskit/theme/colors';
import { useGlobalTheme } from '@atlaskit/theme/components';
import { fontFamily as getFontFamily, gridSize as getGridSize } from '@atlaskit/theme/constants';
import { h200 } from '@atlaskit/theme/typography';
import { FieldId } from './field';
const gridSize = getGridSize();
const fontFamily = getFontFamily(); // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage

const lightH200Styles = css(h200({
  theme: {
    mode: 'light'
  }
})); // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage

const darkH200Styles = css(h200({
  theme: {
    mode: 'dark'
  }
}));
const messageErrorColorStyles = css({
  color: `var(--ds-text-danger, ${R400})`
});
const messageNeutralColorStyles = css({
  color: `var(--ds-text-subtlest, ${N200})`
});
const messageValidColorStyles = css({
  color: `var(--ds-text-success, ${G400})`
});
const messageStyles = css({
  display: 'flex',
  marginTop: `${gridSize * 0.5}px`,
  justifyContent: 'baseline',
  fontFamily: `${fontFamily}`,
  fontWeight: 'normal'
});
const iconWrapperStyles = css({
  display: 'flex'
});

const IconWrapper = ({
  children
}) => {
  return jsx("span", {
    css: iconWrapperStyles
  }, children);
};

const Message = ({
  children,
  error,
  valid,
  fieldId,
  testId
}) => {
  const {
    mode
  } = useGlobalTheme();
  return jsx("div", {
    css: [mode === 'light' ? lightH200Styles : darkH200Styles, messageStyles, error ? messageErrorColorStyles : valid ? messageValidColorStyles : messageNeutralColorStyles],
    "data-testid": testId,
    id: fieldId
  }, children);
};

/**
 * __Helper message__
 *
 * A helper message tells the user what kind of input the field takes. For example, a helper message could be
 * 'Password should be more than 4 characters'
 *
 */
export const HelperMessage = ({
  children,
  testId
}) => jsx(FieldId.Consumer, null, fieldId => jsx(Message, {
  fieldId: fieldId ? `${fieldId}-helper` : undefined,
  testId: testId
}, children));
/**
 * __Error message__
 *
 * An error message is used to tell a user that the field input is invalid. For example, an error message could be
 * 'Invalid username, needs to be more than 4 characters'.
 *
 */

export const ErrorMessage = ({
  children,
  testId
}) => jsx(FieldId.Consumer, null, fieldId => jsx(Message, {
  error: true,
  fieldId: fieldId ? `${fieldId}-error` : undefined,
  testId: testId
}, jsx(IconWrapper, null, jsx(ErrorIcon, {
  size: "small",
  label: "error"
})), children));
/**
 * __Valid message__
 *
 * A valid message is used to tell a user that the field input is valid. For example,
 * a helper message could be 'Nice one, this username is available'.
 *
 */

export const ValidMessage = ({
  children,
  testId
}) => jsx(FieldId.Consumer, null, fieldId => jsx(Message, {
  fieldId: fieldId ? `${fieldId}-valid` : undefined,
  testId: testId,
  valid: true
}, jsx(IconWrapper, null, jsx(SuccessIcon, {
  size: "small",
  label: "success"
})), children));