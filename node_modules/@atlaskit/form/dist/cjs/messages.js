"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidMessage = exports.HelperMessage = exports.ErrorMessage = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _success = _interopRequireDefault(require("@atlaskit/icon/glyph/editor/success"));

var _error = _interopRequireDefault(require("@atlaskit/icon/glyph/error"));

var _colors = require("@atlaskit/theme/colors");

var _components = require("@atlaskit/theme/components");

var _constants = require("@atlaskit/theme/constants");

var _typography = require("@atlaskit/theme/typography");

var _field = require("./field");

/** @jsx jsx */
var gridSize = (0, _constants.gridSize)();
var fontFamily = (0, _constants.fontFamily)(); // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage

var lightH200Styles = (0, _core.css)((0, _typography.h200)({
  theme: {
    mode: 'light'
  }
})); // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage

var darkH200Styles = (0, _core.css)((0, _typography.h200)({
  theme: {
    mode: 'dark'
  }
}));
var messageErrorColorStyles = (0, _core.css)({
  color: "var(--ds-text-danger, ".concat(_colors.R400, ")")
});
var messageNeutralColorStyles = (0, _core.css)({
  color: "var(--ds-text-subtlest, ".concat(_colors.N200, ")")
});
var messageValidColorStyles = (0, _core.css)({
  color: "var(--ds-text-success, ".concat(_colors.G400, ")")
});
var messageStyles = (0, _core.css)({
  display: 'flex',
  marginTop: "".concat(gridSize * 0.5, "px"),
  justifyContent: 'baseline',
  fontFamily: "".concat(fontFamily),
  fontWeight: 'normal'
});
var iconWrapperStyles = (0, _core.css)({
  display: 'flex'
});

var IconWrapper = function IconWrapper(_ref) {
  var children = _ref.children;
  return (0, _core.jsx)("span", {
    css: iconWrapperStyles
  }, children);
};

var Message = function Message(_ref2) {
  var children = _ref2.children,
      error = _ref2.error,
      valid = _ref2.valid,
      fieldId = _ref2.fieldId,
      testId = _ref2.testId;

  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
      mode = _useGlobalTheme.mode;

  return (0, _core.jsx)("div", {
    css: [mode === 'light' ? lightH200Styles : darkH200Styles, messageStyles, error ? messageErrorColorStyles : valid ? messageValidColorStyles : messageNeutralColorStyles],
    "data-testid": testId,
    id: fieldId
  }, children);
};

/**
 * __Helper message__
 *
 * A helper message tells the user what kind of input the field takes. For example, a helper message could be
 * 'Password should be more than 4 characters'
 *
 */
var HelperMessage = function HelperMessage(_ref3) {
  var children = _ref3.children,
      testId = _ref3.testId;
  return (0, _core.jsx)(_field.FieldId.Consumer, null, function (fieldId) {
    return (0, _core.jsx)(Message, {
      fieldId: fieldId ? "".concat(fieldId, "-helper") : undefined,
      testId: testId
    }, children);
  });
};
/**
 * __Error message__
 *
 * An error message is used to tell a user that the field input is invalid. For example, an error message could be
 * 'Invalid username, needs to be more than 4 characters'.
 *
 */


exports.HelperMessage = HelperMessage;

var ErrorMessage = function ErrorMessage(_ref4) {
  var children = _ref4.children,
      testId = _ref4.testId;
  return (0, _core.jsx)(_field.FieldId.Consumer, null, function (fieldId) {
    return (0, _core.jsx)(Message, {
      error: true,
      fieldId: fieldId ? "".concat(fieldId, "-error") : undefined,
      testId: testId
    }, (0, _core.jsx)(IconWrapper, null, (0, _core.jsx)(_error.default, {
      size: "small",
      label: "error"
    })), children);
  });
};
/**
 * __Valid message__
 *
 * A valid message is used to tell a user that the field input is valid. For example,
 * a helper message could be 'Nice one, this username is available'.
 *
 */


exports.ErrorMessage = ErrorMessage;

var ValidMessage = function ValidMessage(_ref5) {
  var children = _ref5.children,
      testId = _ref5.testId;
  return (0, _core.jsx)(_field.FieldId.Consumer, null, function (fieldId) {
    return (0, _core.jsx)(Message, {
      fieldId: fieldId ? "".concat(fieldId, "-valid") : undefined,
      testId: testId,
      valid: true
    }, (0, _core.jsx)(IconWrapper, null, (0, _core.jsx)(_success.default, {
      size: "small",
      label: "success"
    })), children);
  });
};

exports.ValidMessage = ValidMessage;